// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    static Array divisorToThe; // used by division

    /** Initializes the library. */
    function void init() {
        var int exponent;
        let divisorToThe = Array.new(16);
        let twoToThe = Array.new(16);

        let twoToThe[0] = 1;

        while (exponent < 15) {
            let exponent = exponent+1;
            let twoToThe[exponent] = twoToThe[exponent-1] + twoToThe[exponent-1];
        }

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int sortVar;
        var int handledBits;
        var int i;
        var boolean isNegative;

        let isNegative = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (x < y) {
            let sortVar = x;
            let x = y;
            let y = sortVar;
        }

        while ((handledBits-1) < (y-1)) {
            if (~((twoToThe[i] & y) = 0)) {
                let sum = sum + x;
                let handledBits = handledBits + twoToThe[i];
            }

            let x = x + x;
            let i = i + 1;
        }

        if (isNegative) {
            let sum = -sum;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int i;
        var int result;
        var boolean isNegative;
        var boolean isOver;

        if (y = 0) {
            do Sys.error(3);
        }

        let isNegative = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
        let divisorToThe[0] = Math.abs(y);
        let x = Math.abs(x);

        while ((i < 15) & (~isOver)) {
            let isOver = (32767 - (divisorToThe[i] - 1)) < (divisorToThe[i] - 1);
            if (~isOver) {
                let divisorToThe[i + 1] = divisorToThe[i] + divisorToThe[i];
                let isOver = (divisorToThe[i + 1] - 1) > (x - 1);
                if (~isOver) {
                    let i = i + 1;
                }
            }
        }

        while (i > -1) {
            if (~((divisorToThe[i] - 1) > (x - 1))) {
                let result = result + twoToThe[i];
                let x = x - divisorToThe[i];
            }
            let i = i - 1;
        }

        if (isNegative) {
            let result = -result;
        }

        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j;
        var int value;
        var int squaredValue;
        var int y;

        if (x < 0) {
            do Sys.error(4);
        }

        let j = 7;

        while (j > -1) {
            let value = y + twoToThe[j];
            let squaredValue = Math.multiply(value, value);
            if ((~(squaredValue > x)) & (~(squaredValue < 0))) {
                let y = value;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            let b = a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            let b = a;
        }
        return b;
    }
}
