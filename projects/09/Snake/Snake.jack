/** Class Snake */
class Snake {
    field SnakeSegment _head;

    constructor Snake new() {
        var SnakeSegment body1, body2;
        var SnakeSegment lastSegment;

        let _head = SnakeSegment.new(3, 0, SquareType.SnakeHead(), Direction.Right());
        let body1 = SnakeSegment.new(2, 0, SquareType.SnakeBody(), Direction.Right());
        let body2 = SnakeSegment.new(1, 0, SquareType.SnakeBody(), Direction.Right());
        
        let lastSegment = getLastSegment();
        do lastSegment.setNextSegment(body1);
        let lastSegment = getLastSegment();
        do lastSegment.setNextSegment(body2);

        do _head.draw();
        do body1.draw();
        do body2.draw();

        return this;
    }

    method void dispose() {
        do _head.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method boolean move(int direction) {
        var int prevX, prevY, prevDir;
        var int curX, curY, curDir;
        var SnakeSegment current;

        let prevX = _head.getX(); 
        let prevY = _head.getY();
        let prevDir = direction;

        if (direction = Direction.Left()) { let prevX = prevX - 1; }
        if (direction = Direction.Up()) { let prevY = prevY - 1; }
        if (direction = Direction.Right()) { let prevX = prevX + 1; }
        if (direction = Direction.Down()) { let prevY = prevY + 1; }

        // allow to go through wall
        if (prevX < 0) { let prevX = prevX + Matrix.getWidth(); }
        if (prevY < 0) { let prevY = prevY + Matrix.getHeight(); }
        if ((prevX = Matrix.getWidth()) | (prevX > Matrix.getWidth())) { let prevX = 0; }
        if ((prevY = Matrix.getHeight()) | (prevY > Matrix.getHeight())) { let prevY = 0; }

        // erase last segment
        let current = getLastSegment();
        do current.erase();
        let current = _head;

        // update all coordinates
        while (~(current = null)) {
            let curX = current.getX();
            let curY = current.getY();
            let curDir = current.getDirection();

            do current.setX(prevX);
            do current.setY(prevY);
            do current.setDirection(prevDir);

            let prevX = curX;
            let prevY = curY;
            let prevDir = curDir;
            let current = current.getNextSegment();
        }

        // update first two segments
        do _head.draw();
        let current = _head.getNextSegment();
        do current.draw();

        return true;
    }

    method SnakeSegment getLastSegment() {
        var SnakeSegment current;
        let current = _head;
        while (~(current.getNextSegment() = null)) {
            let current = current.getNextSegment();
        }
        return current;
    }
}