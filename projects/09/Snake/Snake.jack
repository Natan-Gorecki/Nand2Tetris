/** Class Snake */
class Snake {
    field SnakeSegment _head;

    constructor Snake new() {
        var SnakeSegment body1, body2;
        var SnakeSegment lastSegment;

        let _head = SnakeSegment.new(3, 0, SquareType.SnakeHead(), Direction.Right());
        let body1 = SnakeSegment.new(2, 0, SquareType.SnakeBody(), Direction.Right());
        let body2 = SnakeSegment.new(1, 0, SquareType.SnakeBody(), Direction.Right());
        
        let lastSegment = getLastSegment();
        do lastSegment.setNextSegment(body1);
        let lastSegment = getLastSegment();
        do lastSegment.setNextSegment(body2);

        return this;
    }

    method void dispose() {
        do _head.dispose();
        do Memory.deAlloc(this);
        return;
    }

    // getters
    method SnakeSegment getHead() { return _head; }
    method SnakeSegment getLastSegment() {
        var SnakeSegment current;
        let current = _head;
        while (~(current.getNextSegment() = null)) {
            let current = current.getNextSegment();
        }
        return current;
    }

    method void move(Square square, boolean removeLast) {
        var SnakeSegment oldHead;
        let oldHead = _head;

        let _head = SnakeSegment.new(square.getX(), square.getY(), SquareType.SnakeHead(), square.getDirection());
        do _head.setNextSegment(oldHead);
        do oldHead.setSquareType(SquareType.SnakeBody());
        
        do redrawSnake();

        if (removeLast) {
            do removeLastSegment();
        }

        return;
    }

    method void redrawSnake() {
        var SnakeSegment segment;
        let segment = _head.getNextSegment();

        do _head.draw();
        do segment.draw();

        return;
    }

    method void removeLastSegment() {
        var SnakeSegment beforeCurrent, current, next;
    
        let beforeCurrent = null;
        let current = _head;
        let next = _head.getNextSegment();

        while (~(next = null)) {
            let beforeCurrent = current;
            let current = next;
            let next = current.getNextSegment();
        }

        do beforeCurrent.setNextSegment(null);
        do current.dispose();
        return;
    }
}